---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-create
  namespace: "threeport-api"
data:
  db.sql: |+
    CREATE USER IF NOT EXISTS tp_rest_api
      LOGIN
    ;
    CREATE DATABASE IF NOT EXISTS threeport_api
        encoding='utf-8'
    ;
    GRANT ALL ON DATABASE threeport_api TO tp_rest_api;


---
# Source: kratos/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ory-kratos
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: kratos/templates/configmap-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ory-kratos-config
  namespace: threeport-api
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
data:
  # Render the kratos config:
  "kratos.yaml": |
    courier:
      smtp: {}
    identity:
      default_schema_id: default
      schemas:
      - id: default
        url: file:///etc/config/identity.default.schema.json
    selfservice:
      default_browser_return_url: http://127.0.0.1:4455/
    serve:
      admin:
        port: 4434
      public:
        port: 4433
  # Render the identity schemas to disk:
  identity.default.schema.json: |-
    {
      "$id": "https://schemas.ory.sh/presets/kratos/identity.email.schema.json",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Person",
      "type": "object",
      "properties": {
        "traits": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "title": "E-Mail",
              "ory.sh/kratos": {
                "credentials": {
                  "password": {
                    "identifier": true
                  }
                },
                "recovery": {
                  "via": "email"
                },
                "verification": {
                  "via": "email"
                }
              }
            }
          },
          "required": [
            "email"
          ],
          "additionalProperties": false
        }
      }
    }
---
# Source: kratos/templates/service-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: ory-kratos-admin
  namespace: threeport-api
  labels:
    app.kubernetes.io/component: admin
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http-admin
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: ory
---
# Source: kratos/templates/service-public.yaml
apiVersion: v1
kind: Service
metadata:
  name: ory-kratos-public
  namespace: threeport-api
  labels:
    app.kubernetes.io/component: public
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http-public
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: ory
---
# Source: kratos/templates/statefulset-svc.yaml
# Headless Service for StatefulSet. See https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#limitations 
# and https://kubernetes.io/docs/concepts/services-networking/service/#headless-services for details.
apiVersion: v1
kind: Service
metadata:
  name: ory-kratos-courier
  namespace: threeport-api
  labels:
    app.kubernetes.io/component: courier
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  clusterIP: None
  ports:
    - port: 80
      targetPort: http-public
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ory-kratos-courier
    app.kubernetes.io/instance: ory
---
# Source: kratos/templates/deployment-kratos.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ory-kratos
  namespace: threeport-api
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  progressDeadlineSeconds: 3600
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 30%
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kratos
      app.kubernetes.io/instance: ory
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kratos
        helm.sh/chart: kratos-0.27.0
        app.kubernetes.io/instance: ory
        app.kubernetes.io/version: "v0.11.1"
        app.kubernetes.io/managed-by: Helm
      annotations:        
        checksum/kratos-config: 2aab8f3a7fafeb1990c3bb1305960d6678e827b27607e0a02a3d70c25f9bf7a8
        checksum/kratos-templates: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/kratos-secrets: d17ee5ca6f3034a849483fcf36d4275f4174be00c8320478fcd13e00b28971a1
    spec:
      initContainers:
#      - name: db-init
#        image: cockroachdb/cockroach:v22.2.3
#        imagePullPolicy: "IfNotPresent"
#        command:
#          - "bash"
#          - "-c"
#          - "cockroach sql --insecure --host crdb-public.threeport-api.svc.cluster.local --port 26257 -f /etc/threeport/db-create/db.sql"
#        volumeMounts:
#          - name: db-create
#            mountPath: "/etc/threeport/db-create"
      volumes:
        - name: db-create
          configMap:
            name: db-create
        - name: kratos-config-volume
          configMap:
            name: ory-kratos-config
      automountServiceAccountToken: true
      serviceAccountName: ory-kratos
      containers:
        - name: kratos
          image: oryd/kratos:v0.11.1
          imagePullPolicy: IfNotPresent
          command:
            - kratos
          args:
            - serve
            - all
            - --config
            - /etc/config/kratos.yaml
          volumeMounts:
            - name: kratos-config-volume
              mountPath: /etc/config
              readOnly: true
          env:
            - name: DSN
              valueFrom:
                secretKeyRef:
                  name: ory-kratos
                  key: dsn
            - name: SECRETS_DEFAULT
              valueFrom:
                secretKeyRef:
                  name: ory-kratos
                  key: secretsDefault
                  optional: true
            - name: SECRETS_COOKIE
              valueFrom:
                secretKeyRef:
                  name: ory-kratos
                  key: secretsCookie
                  optional: true
            - name: SECRETS_CIPHER
              valueFrom:
                secretKeyRef:
                  name: ory-kratos
                  key: secretsCipher
                  optional: true
            - name: COURIER_SMTP_CONNECTION_URI
              valueFrom:
                secretKeyRef:
                  name: ory-kratos
                  key: smtpConnectionURI
          ports:
            - name: http-admin
              containerPort: 4434
              protocol: TCP
            - name: http-public
              containerPort: 4433
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /admin/health/ready
              port: 4434
              httpHeaders:
                - name: Host
                  value: '127.0.0.1'
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /admin/health/ready
              port: 4434
              httpHeaders:
                - name: Host
                  value: '127.0.0.1'
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /admin/health/ready
              port: 4434
              httpHeaders:
                - name: Host
                  value: '127.0.0.1'
            failureThreshold: 60
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            null
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 100
---
# Source: kratos/templates/statefulset-mail.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ory-kratos-courier
  namespace: threeport-api
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ory-kratos-courier
      app.kubernetes.io/instance: ory
  serviceName: ory-kratos-courier
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ory-kratos-courier
        app.kubernetes.io/instance: ory
      annotations:        
        checksum/kratos-config: 2aab8f3a7fafeb1990c3bb1305960d6678e827b27607e0a02a3d70c25f9bf7a8
        checksum/kratos-templates: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/kratos-secrets: ffe830c1646aab6c1c81881e3e9b1517f27c01b74afab4aaf1151450df6a0ad4
    spec:
      serviceAccountName: ory-kratos
      containers:
        - name: ory-kratos-courier
          image: oryd/kratos:v0.11.1
          imagePullPolicy: IfNotPresent
          args:
            - courier
            - watch 
            - --config
            - /etc/config/kratos.yaml
          volumeMounts:
            - name: ory-kratos-config-volume
              mountPath: /etc/config
              readOnly: true
          env:
            - name: LOG_FORMAT
              value: json
            - name: LOG_LEVEL
              value: trace
            - name: DSN
              valueFrom:
                secretKeyRef:
                  name: ory-kratos
                  key: dsn
            - name: SECRETS_DEFAULT
              valueFrom:
                secretKeyRef:
                  name: ory-kratos
                  key: secretsDefault
                  optional: true
            - name: SECRETS_COOKIE
              valueFrom:
                secretKeyRef:
                  name: ory-kratos
                  key: secretsCookie
                  optional: true
            - name: SECRETS_CIPHER
              valueFrom:
                secretKeyRef:
                  name: ory-kratos
                  key: secretsCipher
                  optional: true
            - name: COURIER_SMTP_CONNECTION_URI
              valueFrom:
                secretKeyRef:
                  name: ory-kratos
                  key: smtpConnectionURI
          resources:
            null
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 100
      volumes:
        - name: ory-kratos-config-volume
          configMap:
            name: ory-kratos-config
---
# Source: kratos/templates/job-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ory-kratos-job
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
---
# Source: kratos/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ory-kratos
  namespace: threeport-api
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
    helm.sh/resource-policy: keep
type: Opaque
data:
  dsn: "Y29ja3JvYWNoOi8vdHBfcmVzdF9hcGk6dHAtcmVzdC1hcGktcHdkQGNyZGItcHVibGljLnRocmVlcG9ydC1hcGkuc3ZjLmNsdXN0ZXIubG9jYWw6MjYyNTcvdGhyZWVwb3J0X2FwaT9zc2xtb2RlPWRpc2FibGU="
  # Generate a random secret if the user doesn't give one. User given secret has priority
  secretsDefault: "ImRvbG9yZSBvY2NhZWNhdCBub3N0cnVkIFV0Iiwic2l0IGV0IGNvbW1vZG9hdXRlIHV0IHZvbHVwdGF0ZSBjb25zZWN0ZXR1ciBEdWlzIg=="
  secretsCookie: "MUFSS0toVzVEVlFrRFdsV2tLUElUWjRYQU1IVWRhdHM="
  secretsCipher: "WEh1UHRlSGl5d2s5WE0wOXA2Q28xTUhLT2N3OHhOZE4="
  smtpConnectionURI: "c210cHM6Ly90ZXN0OnRlc3RAbWFpbHNsdXJwZXI6MTAyNS8/c2tpcF9zc2xfdmVyaWZ5PXRydWU="
---
# Source: kratos/templates/configmap-migrate.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ory-kratos-migrate
  namespace: threeport-api
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook-weight: "0"
    helm.sh/hook: "pre-install, pre-upgrade"
    helm.sh/hook-delete-policy: "before-hook-creation"
data:
  # Render the kratos config:
  "kratos.yaml": |
    courier:
      smtp: {}
    identity:
      default_schema_id: default
      schemas:
      - id: default
        url: file:///etc/config/identity.default.schema.json
    selfservice:
      default_browser_return_url: http://127.0.0.1:4455/
    serve:
      admin:
        port: 4434
      public:
        port: 4433
  # Render the identity schemas to disk:
  identity.default.schema.json: |-
    {
      "$id": "https://schemas.ory.sh/presets/kratos/identity.email.schema.json",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Person",
      "type": "object",
      "properties": {
        "traits": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "title": "E-Mail",
              "ory.sh/kratos": {
                "credentials": {
                  "password": {
                    "identifier": true
                  }
                },
                "recovery": {
                  "via": "email"
                },
                "verification": {
                  "via": "email"
                }
              }
            }
          },
          "required": [
            "email"
          ],
          "additionalProperties": false
        }
      }
    }
---
# Source: kratos/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ory-kratos-test-connection"
  namespace: threeport-api
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['ory-kratos-admin:80/admin/health/ready']
  restartPolicy: Never
---
# Source: kratos/templates/job-migration.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ory-kratos-automigrate
  namespace: threeport-api
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.27.0
    app.kubernetes.io/instance: ory
    app.kubernetes.io/version: "v0.11.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "1"
spec:
  template:
    metadata: 
      annotations:
        helm.sh/hook: pre-install, pre-upgrade
        helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
        helm.sh/hook-weight: "1"
      labels:
        app.kubernetes.io/name: ory-kratos-automigrate
        app.kubernetes.io/instance: ory
    spec:
      serviceAccountName: ory-kratos-job
      automountServiceAccountToken: true
      containers:
      - name: kratos-automigrate
        image: oryd/kratos:v0.11.1
        imagePullPolicy: IfNotPresent
        command: ["kratos"]
        args: ["migrate", "sql", "-e", "--yes", "--config", "/etc/config/kratos.yaml"]
        env:
          - name: DSN
            valueFrom:
              secretKeyRef:
                name: ory-kratos
                key: dsn
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 100
        volumeMounts:
          - name: kratos-config-volume
            mountPath: /etc/config
            readOnly: true
      restartPolicy: Never
      volumes:
        - name: kratos-config-volume
          configMap:
            name: ory-kratos-migrate
      shareProcessNamespace: false
  backoffLimit: 10
